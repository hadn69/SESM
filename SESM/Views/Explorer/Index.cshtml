@model dynamic

@{
    ViewBag.Title = "File Explorer";
    ViewBag.Category = 5;
    Layout = "~/Views/Shared/_NewLayout.cshtml";
    int serverId = (int)ViewBag.id;

}
<script type="text/javascript" src="/Content/js/jstree.min.js"></script>
<link rel="stylesheet" href="/Content/css/jstree.min.css" />
<script type="text/javascript" src="/Content/js/jquery.form.min.js"></script>
<script type="text/javascript">
    function fileSizeIEC(a, b, c, d, e) {
        return (b = Math, c = b.log, d = 1024, e = c(a) / c(d) | 0, a / b.pow(d, e)).toFixed(2)
            + ' ' + (e ? 'KMGTPEZY'[--e] + 'B' : 'Bytes');
    }
    function isEmptyOrSpaces(str) {
        return str === null || str.match(/^\s*$/) !== null;
    }

    var serverId = "@serverId";
    var currentPath = "";
    var currentNode = null;

    function refresh() {
        $.post("/Explorer/GetDirectoryContent/" + serverId,
        {
            path: currentPath
        },
        function (data, status) {
            console.log(data);
            var xmlDoc = $.parseXML(data);
            var xmlObj = $(xmlDoc);
            var root = xmlObj.find("Response");
            if (root.children("Type").text() == "Error") {
                alert(root.children("Content").text());
            } else {
                $("#listBody").find("tr:gt(0)").remove();
                root.children("Content").first().children("Item").each(function (index) {
                    var row = "<tr>";
                    row += "<td><input type=\"checkbox\"/></td>";
                    if ($(this).children("Type").first().text() == "Directory") {
                        row += "<td><i class=\"fa fa-folder fa-inverse\"></i></td>";
                    }
                    if ($(this).children("Type").first().text() == "File") {
                        row += "<td><i class=\"fa fa-file fa-inverse\"></i></td>";
                    }
                    row += "<td>" + $(this).children("Name").first().text() + "</td>";
                    row += "<td>" + fileSizeIEC($(this).children("Size").first().text()) + "</td>";
                    row += "<td>" + $(this).children("Timestamp").first().text() + "</td>";
                    row += "<td>";
                    row += "<span class=\"fa-stack\" title=\"Cut\"><i class=\"fa fa-stack-2x fa-square white\"></i><i class=\"fa fa-stack-1x fa-cut text-info\"></i></span>&nbsp;";
                    row += "<span class=\"fa-stack\" title=\"Copy\"><i class=\"fa fa-stack-2x fa-square white\"></i><i class=\"fa fa-stack-1x fa-copy text-success\"></i></span>&nbsp;";
                    row += "<span class=\"fa-stack\" title=\"Download\"><i class=\"fa fa-stack-2x fa-square white\"></i><i class=\"fa fa-stack-1x fa-download text-warning\"></i></span>&nbsp;";
                    row += "<span class=\"fa-stack\" title=\"Delete\"><i class=\"fa fa-stack-2x fa-square white\"></i><i class=\"fa fa-stack-1x fa-trash-o text-danger\"></i></span>&nbsp;";
                    row += "<span class=\"fa-stack\" title=\"Rename\"><i class=\"fa fa-stack-2x fa-square white\"></i><i class=\"fa fa-stack-1x fa-pencil text-warning\"></i></span>&nbsp;";
                    if ($(this).children("Type").first().text() == "File" && $(this).children("Size").first().text() <= (512 * 1024)) {
                        row += "<span class=\"fa-stack\" title=\"Edit\"><i class=\"fa fa-stack-2x fa-square white\"></i><i class=\"fa fa-stack-1x fa-pencil-square-o text-warning\"></i></span>&nbsp;";
                    }
                    row += "</td>";
                    row += "</tr>";
                    $("#listBody").append(row);

                    var itemPath = "";
                    var itemName = $(this).children("Name").first().text();
                    if (isEmptyOrSpaces(currentPath)) {
                        itemPath = itemName;
                    } else {
                        itemPath = currentPath + "\\" + itemName;
                    }

                    // DELETE
                    $('#listBody > tr:last-child > td:last-child > span[title="Delete"]').on("click", function () {
                        $("#confirmDeleteContent").text(itemName);
                        $("#confirmDeleteButton").off("click").on("click", function () {
                            $('#confirmDeleteModal').modal('hide');
                            $.post("/Explorer/Delete/" + serverId,
                            {
                                paths: itemPath
                            },
                            function (data, status) {
                                console.log(data);
                                var xmlDoc = $.parseXML(data);
                                var xmlObj = $(xmlDoc);
                                var root = xmlObj.find("Response");
                                if (root.children("Type").text() == "Error") {
                                    alert(root.children("Content").text());
                                }
                                refresh();
                                $('#jstree_div').jstree(true).refresh_node(currentNode);
                            });
                        });
                        $('#confirmDeleteModal').modal('show');


                    });
                    // RENAME
                    $('#listBody > tr:last-child > td:last-child > span[title="Rename"]').on("click", function () {

                        $("#renameInput").val(itemName);
                        $("#renameButton").off("click").on("click", function () {
                            $('#renameModal').modal('hide');
                            var newName = $("#renameInput").val();
                            if (newName != null && newName != itemName) {
                                $.post("/Explorer/Rename/" + serverId,
                                {
                                    sourcePath: itemPath,
                                    newName: newName
                                },
                                function (data, status) {
                                    console.log(data);
                                    var xmlDoc = $.parseXML(data);
                                    var xmlObj = $(xmlDoc);
                                    var root = xmlObj.find("Response");
                                    if (root.children("Type").text() == "Error") {
                                        alert(root.children("Content").text());
                                    }
                                    refresh();
                                    $('#jstree_div').jstree(true).refresh_node(currentNode);
                                });
                            }
                        });
                        $('#renameModal').modal('show');
                    });
                    // DOWNLOAD
                    $('#listBody > tr:last-child > td:last-child > span[title="Download"]').on("click", function () {
                        $("#downloadForm > input").val(itemPath);
                        $("#downloadForm").submit();
                    });
                });
            }
        });
    }

    $(function () {
        $('#jstree_div').on('select_node.jstree', function (e, data) {
            var path = $('#jstree_div').jstree(true).get_path(data.node, "\\").substring(2);
            currentPath = path;
            currentNode = data.node;
            refresh();
        });

        $('#jstree_div').on('loaded.jstree', function () {
            $('#jstree_div').jstree(true).select_node("rootNode");
            $('#jstree_div').jstree(true).open_node("rootNode");
        });

        $('#jstree_div').jstree({
            "plugins": ["wholerow"],
            'core': {
                "data": function (obj, cb) {
                    if (obj.id == "#") {
                        cb.call(this, [{ text: "\\", id: "rootNode", children: true }]);
                        return;
                    }
                    var path = "";
                    if (obj.id != "#") {
                        path = $('#jstree_div').jstree(true).get_path(obj, "\\").substring(2);
                    }
                    $.post("/explorer/GetDirectoryDirectories/" + serverId,
                    {
                        path: path
                    },
                    function (data, status) {
                        console.log(data);
                        var xmlDoc = $.parseXML(data);
                        var xmlObj = $(xmlDoc);
                        var root = xmlObj.find("Response");
                        if (root.children("Type").first().text() == "Error") {
                            alert(root.children("Content").text());
                            cb.call(this, new Array());
                        } else {
                            var dirArray = new Array();
                            root.children("Content").first().children("Item").each(function (index) {
                                dirArray.push({ text: $(this).children("Name").first().text(), children: true });
                            });
                            cb.call(this, dirArray);
                        }
                    });
                }
            }
        });
        $('#checkAll').change(function () {
            console.log(this.checked);
            $('#listBody > tr > td > input[type="checkbox"]').prop('checked', this.checked);
        });
        $('#deleteSelected').on("click", function () {
            var toDelete = new Array();

            $('#listBody > tr:not(:first-child) > td:first-child > input:checked').each(function () {
                if (isEmptyOrSpaces(currentPath)) {
                    toDelete.push($(this).parent().parent().children('td:nth-child(3)').text());
                } else {
                    toDelete.push(currentPath + "\\" + $(this).parent().parent().children('td:nth-child(3)').text());
                }
            });

            $("#confirmDeleteContent").html(toDelete.join("<br/>"));
            $("#confirmDeleteButton").off("click").on("click", function () {
                $('#confirmDeleteModal').modal('hide');
                $.post("/Explorer/Delete/" + serverId,
                    {
                        paths: toDelete.join(":")
                    },
                    function (data, status) {
                        console.log(data);
                        var xmlDoc = $.parseXML(data);
                        var xmlObj = $(xmlDoc);
                        var root = xmlObj.find("Response");
                        if (root.children("Type").first().text() == "Error") {
                            alert(root.children("Content").text());
                        }
                        refresh();
                    }
                );
            });
            $('#confirmDeleteModal').modal('show');
        });
        $('#downloadSelected').on("click", function () {
            var toDownload = new Array();

            $('#listBody > tr:not(:first-child) > td:first-child > input:checked').each(function () {
                if (isEmptyOrSpaces(currentPath)) {
                    toDownload.push($(this).parent().parent().children('td:nth-child(3)').text());
                } else {
                    toDownload.push(currentPath + "\\" + $(this).parent().parent().children('td:nth-child(3)').text());
                }
            });

            $("#downloadForm > input").val(toDownload.join(":"));
            $("#downloadForm").submit();
        });
        $('#newFile').on("click", function () {
            $("#newFileInput").val("");
            $("#newFileButton").off("click").on("click", function () {
                $('#newFileModal').modal('hide');
                var path = "";
                if (isEmptyOrSpaces(currentPath)) {
                    path = $("#newFolderInput").val();
                } else {
                    path = currentPath + "\\" + $("#newFileInput").val();
                }
                $.post("/Explorer/NewFile/" + serverId,
                {
                    path: path
                },
                function (data, status) {
                    console.log(data);
                    var xmlDoc = $.parseXML(data);
                    var xmlObj = $(xmlDoc);
                    var root = xmlObj.find("Response");
                    if (root.children("Type").first().text() == "Error") {
                        alert(root.children("Content").text());
                    }
                    refresh();
                }
            );
            });
            $('#newFileModal').modal('show');
        });
        $('#newFolder').on("click", function () {
            $("#newFolderInput").val("");
            $("#newfolderButton").off("click").on("click", function () {
                $('#newFolderModal').modal('hide');
                var path = "";
                if (isEmptyOrSpaces(currentPath)) {
                    path = $("#newFolderInput").val();
                } else {
                    path = currentPath + "\\" + $("#newFolderInput").val();
                }
                $.post("/Explorer/NewFolder/" + serverId,
                {
                    path: path
                },
                function (data, status) {
                    console.log(data);
                    var xmlDoc = $.parseXML(data);
                    var xmlObj = $(xmlDoc);
                    var root = xmlObj.find("Response");
                    if (root.children("Type").first().text() == "Error") {
                        alert(root.children("Content").text());
                    }
                    refresh();
                    $('#jstree_div').jstree(true).refresh_node(currentNode);
                }
            );
            });
            $('#newFolderModal').modal('show');
        });
        $('#upload').on("click", function () {
            $('#uploadModal').modal('show');
            $("#uploadInput").val("");
            $("#uploadButton").off("click").on("click", function () {
                var options = {
                    beforeSend: function () {
                        $("#progress").show();
                        $("#progress > div").width('0%');
                    },
                    datatype: "xml",
                    uploadProgress: function (event, position, total, percentComplete) {
                        $("#progress > div").width(percentComplete + '%');

                    },
                    success: function () {
                        $("#progress > div").width('100%');
                    },
                    complete: function (data) {
                        $('#uploadModal').modal('hide');
                        console.log(data);
                        var xmlDoc = $.parseXML(data);
                        var xmlObj = $(xmlDoc);
                        var root = xmlObj.find("Response");
                        if (root.children("Type").first().text() == "Error") {
                            alert(root.children("Content").text());
                        }
                        refresh();
                        $('#jstree_div').jstree(true).refresh_node(currentNode);
                    },
                    error: function () {
                        alert("Error while uploading");
                    },
                };
                $("#uploadPathInput").val(currentPath);
                $("#uploadForm").ajaxSubmit(options);
            });
        });
    });
</script>
<style>
    .table-striped > tbody > tr:nth-child(odd) > td, .table-striped > tbody > tr:nth-child(odd) > th {
        background: rgb(35, 35, 35);
    }

    .table-striped > tbody > tr:nth-child(even) > td, .table-striped > tbody > tr:nth-child(even) > th {
        background: rgb(40, 40, 40);
    }

    .table-hover > tbody > tr:hover > td, .table-hover > tbody > tr:hover > th {
        background: rgb(55, 55, 55);
    }

    .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td, .table > tbody > tr > td, .table > tfoot > tr > td {
        border-top: none;
    }

    #listBody tbody > tr > th {
        border-bottom: 1px solid #ddd;
    }

    .fa-stack:hover {
        cursor: pointer;
    }
</style>


<!-- Rename Modal -->
<div class="modal fade" id="renameModal" tabindex="-1" role="dialog" aria-labelledby="renameModalLabel" aria-hidden="true" style="color:black">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="renameModalLabel">Rename File/Folder</h4>
            </div>
            <div class="modal-body">
                New Name :<br />
                <input id="renameInput" type="text" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="renameButton">Rename</button>
            </div>
        </div>
    </div>
</div>
<!-- New File Modal -->
<div class="modal fade" id="newFileModal" tabindex="-1" role="dialog" aria-labelledby="newFileModalLabel" aria-hidden="true" style="color:black">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="newFileModalLabel">Create File</h4>
            </div>
            <div class="modal-body">
                File Name :<br />
                <input id="newFileInput" type="text" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="newFileButton">Create</button>
            </div>
        </div>
    </div>
</div>
<!-- New Folder Modal -->
<div class="modal fade" id="newFolderModal" tabindex="-1" role="dialog" aria-labelledby="newFolderModalLabel" aria-hidden="true" style="color:black">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="newFileModalLabel">Create Folder</h4>
            </div>
            <div class="modal-body">
                Folder Name :<br />
                <input id="newFolderInput" type="text" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="newfolderButton">Create</button>
            </div>
        </div>
    </div>
</div>
<!-- Upload Modal -->
<div class="modal fade" id="uploadModal" tabindex="-1" role="dialog" aria-labelledby="uploadModalLabel" aria-hidden="true" style="color:black">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="uploadModalLabel">Upload Zip</h4>
            </div>
            <div class="modal-body">
                <form id="uploadForm" method="POST" action="/Explorer/Upload/@serverId" enctype="multipart/form-data">
                    Zip File :<br />
                    <input id="uploadFilesInput" type="file" name="files" class="form-control" multiple/>
                    <input type="checkbox" name="extract" checked="checked" /> Extract Zip(s)<br />
                    <input type="checkbox" name="overwrite" /> Overwrite existing files
                    <input id="uploadPathInput" type="hidden" name="path" value="" />
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%">
                        </div>
                    </div>
                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="uploadButton">Upload</button>
            </div>
        </div>
    </div>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true" style="color:black">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="confirmDeleteModalLabel">Delete File/Folder</h4>
            </div>
            <div class="modal-body">
                Are you sure you want to delete the following file(s) / folder(s) ? :<br />
                <div id="confirmDeleteContent">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmDeleteButton">Delete</button>
            </div>
        </div>
    </div>
</div>
<div style="display:none">
    <form id="downloadForm" method="POST" action="/Explorer/Download/@serverId" target="_blank">
        <input type="hidden" name="paths" value="" />
    </form>
</div>


<br />
<div class="col-md-4" style="height: calc(100% - 235px); background-color: rgb(49, 74, 99); margin-bottom: 15px;padding: 15px 15px 15px 15px;">
    <div id="jstree_div">
    </div>
</div>
<div class="col-md-8" style="padding-right: 0px; height: calc(100% - 235px); ">
    <div class="row" style="background-color: rgb(29, 28, 28); padding: 15px 15px 15px 15px; margin: 0px 0px 0px 0px;">
        <div id="scrollZone" style="overflow: auto; height: calc(100% - 30px); padding-right: 20px;">
            <button class="btn btn-success" id="newFolder"><i class="fa fa-folder fa-lg"></i> New Folder</button>
            <button class="btn btn-primary" id="newFile"><i class="fa fa-file-text fa-lg"></i> New File</button>
            <button class="btn btn-danger" id="deleteSelected"><i class="fa fa-trash-o fa-lg"></i> Delete</button>
            <button class="btn btn-info" id="downloadSelected"><i class="fa fa-download fa-lg"></i> Download</button>
            <button class="btn btn-warning" id="upload"><i class="fa fa-upload fa-lg"></i> Upload</button>
            <table class="table table-hover table-striped" id="listBody">
                <tbody id="listBody">
                    <tr>
                        <th><input type="checkbox" id="checkAll" /></th>
                        <th></th>
                        <th>Name</th>
                        <th>Size</th>
                        <th>Time</th>
                        <th></th>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

