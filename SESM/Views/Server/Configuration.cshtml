@using SESM.DAL
@model SESM.Models.Views.Server.ServerViewModel

@{
    ViewBag.Title = "Server Configuration";
    ViewBag.Category = 5;
    Layout = "~/Views/Shared/_NewLayout.cshtml";


    object labelClass = new { @class = "col-md-5 control-label" };

    const string valueColumn = "col-md-7";
    int id = (int)ViewData["ID"];

    object superAdminAccessClass = new { @class = "form-control", @readonly = "readonly", onclick = "return false" };
    object adminAccessClass = new { @class = "form-control", @readonly = "readonly", onclick = "return false" };
    object managerAccessClass = new { @class = "form-control" };
    AccessLevel accessLevel = (AccessLevel)ViewData["AccessLevel"];
    if(accessLevel == AccessLevel.SuperAdmin)
    {
        superAdminAccessClass = new { @class = "form-control" };
    }
    if(accessLevel == AccessLevel.SuperAdmin || accessLevel == AccessLevel.Admin)
    {
        adminAccessClass = new { @class = "form-control" };
    }
}
<br />
<script type="text/javascript">
    $(document).ready(function () {
        $('#LocSearchBox').on('input', function () {
            var noResult = true;
            $("#noResult").css("display", "");
            var searchedStr = $('#LocSearchBox').val().toLowerCase();

            var terms = new Array();
            var splittedSearchedStr = searchedStr.split(" ");
            splittedSearchedStr.forEach(function (entry) {
                var type = "";
                switch (entry.toLowerCase().split(":")[0]) {
                    case "desc":
                    case "description":
                        type = "desc";
                        break;
                    case "name":
                    case "label":
                        type = "name";
                        break;
                    case "val":
                    case "value":
                        type = "val";
                        break;
                    default:
                        type = "all";
                        break;
                }
                if (type == "all") {
                    terms.push({ type: type, keyword: entry });
                } else {
                    terms.push({ type: type, keyword: entry.toLowerCase().substring(entry.indexOf(":") + 1) });
                }

            });

            $(".tab").each(function (index) {
                var count = 0;
                $(this).css("display", "none");
                $('ul.nav > li > a[href="#' + $(this).attr("id") + '"]').parent().css("display", "none");

                $(this).children(".form-group").each(function (index) {
                    $(this).hide();
                    locThis = $(this);

                    if (terms.every(function (element, index, array) {
                        if (element.type == "desc") {
                            return locThis.attr("data-content").toLowerCase().indexOf(element.keyword) > -1;
                    } else if (element.type == "name") {
                            return locThis.children("label").first().text().toLowerCase().indexOf(element.keyword) > -1;
                    } else if (element.type == "val") {
                            return locThis.children("div").first().children("input, textarea, select").first().val() != undefined
                            && locThis.children("div").first().children("input, textarea, select").first().val().toLowerCase().indexOf(element.keyword) > -1;
                    } else {
                            return locThis.attr("data-content").toLowerCase().indexOf(element.keyword) > -1
                                || locThis.children("label").first().text().toLowerCase().indexOf(element.keyword) > -1
                                || (locThis.children("div").first().children("input, textarea, select").first().val() != undefined
                                    && locThis.children("div").first().children("input, textarea, select").first().val().toLowerCase().indexOf(element.keyword) > -1);
                    }

                    })) {
                        locThis.css("display", "");
                        count++;
                        noResult = false;
                    } 
                });
                if (count != 0) {
                    $(this).css("display", "");
                    $('ul.nav > li > a[href="#' + $(this).attr("id") + '"]').parent().css("display", "");;
                }

            });

            if ($('ul.nav > li.active').css("display") == "none") {
                $('ul.nav > li[style!="display: none;"] > a').first().tab('show');
            }
            if (!noResult) {
                $("#noResult").css("display", "none");
            }

        });


        $('ul > li > a').each(function (index) {
            var targt = $(this).attr("href");
            $(this).click(function () {
                $.smoothScroll({
                    offset: -20,
                    scrollElement: $('#scrollZone'),
                    scrollTarget: targt
                });
            });
        });


        $('.form-group').each(function (index) {
            $(this).mouseover(function () {
                $("#toolTipDiv").html("<h3>" + $(this).children("label").text() + "</h3>" +
                    "<p>" + $(this).attr("data-content") + "</p>");
            });
            $(this).focusin(function () {
                $("#toolTipDiv").html("<h3>" + $(this).children("label").text() + "</h3>" +
                    "<p>" + $(this).attr("data-content") + "</p>");
            });
            $(this).mouseout(function () {
                $("#toolTipDiv").html("");
            });
            $(this).focusout(function () {
                $("#toolTipDiv").html("");
            });
        });

    });
</script>
<div class="col-md-4" style="height: calc(100% - 235px); background-color: rgb(49, 74, 99); margin-bottom: 15px;padding: 15px 15px 15px 15px;">
    <input id="LocSearchBox" type="text" class="form-control" placeholder="Search" />

    <hr />
    <div id="toolTipDiv">

    </div>
</div>
<div class="col-md-8" style="padding-right: 0px; height: calc(100% - 235px); ">
    <div class="row" style="background-color: rgb(29, 28, 28); padding: 15px 15px 15px 15px; margin: 0px 0px 0px 0px;">
        <ul class="nav nav-tabs nav-justified" role="tablist">
            <li class="active"><a href="#General" role="tab" data-toggle="tab">General</a></li>
            <li><a href="#Network" role="tab" data-toggle="tab">Network</a></li>
            <li><a href="#Multipliers" role="tab" data-toggle="tab">Multipliers</a></li>
            <li><a href="#Server" role="tab" data-toggle="tab">Server</a></li>
            <li><a href="#Map" role="tab" data-toggle="tab">Map</a></li>
            <li><a href="#Players" role="tab" data-toggle="tab">Players</a></li>
            <li><a href="#Rights" role="tab" data-toggle="tab">Rights</a></li>
        </ul>

        <div id="scrollZone" style="overflow: auto; height: calc(100% - 71px); padding-right: 20px;">
            <h2 id="noResult" class="text-center" style="display:none;">No Results Match Your Criterias</h2>
            <div class="form-horizontal tab" id="General">
                <h3>General Settings</h3>
                <hr />
                <div class="form-group" data-toggle="popover" data-content="The name displayed on the server list.">
                    @Html.LabelFor(m => m.Name, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.Name, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.Name)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, the server will be displayed in everyone server list, including guests.">
                    @Html.LabelFor(m => m.IsPublic, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.IsPublic, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.IsPublic)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, The server will use SE Server Extender to run.">
                    @Html.LabelFor(m => m.UseServerExtender, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.UseServerExtender, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.UseServerExtender)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, The server will restart at the interval defined by the cron below.">
                    @Html.LabelFor(m => m.AutoRestart, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.AutoRestart, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.AutoRestart)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The Cron for the Auto-Restart feature.">
                    @Html.LabelFor(m => m.AutoRestartCron, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.AutoRestartCron, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.AutoRestartCron)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, ??????????????">
                    @Html.LabelFor(m => m.IgnoreLastSession, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.IgnoreLastSession, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.IgnoreLastSession)
                    </div>
                </div>
            </div>
            <div class="form-horizontal tab" id="Network">
                <h3>Network Settings</h3>
                <hr />
                <div class="form-group" data-toggle="popover" data-content="The IP address on which the server will listen to.">
                    @Html.LabelFor(m => m.IP, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.IP, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.IP)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The port on which the server will listen to.">
                    @Html.LabelFor(m => m.ServerPort, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.ServerPort, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.ServerPort)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The port used to connect to steam.">
                    @Html.LabelFor(m => m.SteamPort, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.SteamPort, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.SteamPort)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The port used by SE Server Extender WCF interface.">
                    @Html.LabelFor(m => m.ServerExtenderPort, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.ServerExtenderPort, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.ServerExtenderPort)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="
                    <strong>OFFLINE :</strong><br />The server will not be accessible at all.<br />
                    <strong>PUBLIC :</strong><br />The server will be visible for all in the in-game server list.<br />
                    <strong>FRIENDS :</strong><br />People will be able to connect to the server only if they have an friend connected to that server.<br />
                    <strong>PRIVATE :</strong><br />Same as the offline mode but you can connect fromm the host itself.">
                    @Html.LabelFor(m => m.OnlineMode, labelClass)
                    <div class="@valueColumn">
                        @Html.EnumDropDownListFor(m => m.OnlineMode, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.OnlineMode)
                    </div>
                </div>

            </div>
            <div class="form-horizontal tab" id="Multipliers">
                <h3>Multipliers Settings</h3>
                <hr />
                <div class="form-group" data-toggle="popover" data-content="The multiplier of the base Inventory size. The bigger it is, the larger your inventories will be.
                    <br /> Recomanded values are 1, 3, 5 or 10.">
                    @Html.LabelFor(m => m.InventorySizeMultiplier, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.InventorySizeMultiplier, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.InventorySizeMultiplier)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The multiplier of the base speed of the assemblers. The bigger it is, the faster your assemblers will be.
                    <br />Recomanded values are 1, 3, 5 or 10.">
                    @Html.LabelFor(m => m.AssemblerSpeedMultiplier, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.AssemblerSpeedMultiplier, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.AssemblerSpeedMultiplier)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The multiplier of the base efficiency of the assemblers. The bigger it is, the less raw materials your assemblers will consume.
                    <br />Recomanded values are 1, 3, 5 or 10.">
                    @Html.LabelFor(m => m.AssemblerEfficiencyMultiplier, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.AssemblerEfficiencyMultiplier, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.AssemblerEfficiencyMultiplier)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The multiplier of the speed of your refineries. The bigger it is, the faster your refineries will be.
                    <br />Recomanded values are 1, 3, 5 or 10.">
                    @Html.LabelFor(m => m.RefinerySpeedMultiplier, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.RefinerySpeedMultiplier, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.RefinerySpeedMultiplier)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The multiplier of the base welding speed. The bigger it is, the faster you will weld blocks.
                    <br /> Recomanded values are 0.5, 1, 2 or 5.">
                    @Html.LabelFor(m => m.WelderSpeedMultiplier, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.WelderSpeedMultiplier, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.WelderSpeedMultiplier)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The multiplier of the base grinding speed. The bigger it is, the faster you will grind blocks.
                    <br /> Recomanded values are 0.5, 1, 2 or 5.">
                    @Html.LabelFor(m => m.GrinderSpeedMultiplier, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.GrinderSpeedMultiplier, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.GrinderSpeedMultiplier)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The multiplier of the base grinding speed when hacking a block. The bigger it is, the faster an enemy will grind you blocks.
                    <br /> Recomanded values is 0.33.">
                    @Html.LabelFor(m => m.HackSpeedMultiplier, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.HackSpeedMultiplier, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.HackSpeedMultiplier)
                    </div>
                </div>
            </div>
            <div class="form-horizontal tab" id="Server">
                <h3>Server Settings</h3>
                <hr />

                <div class="form-group" data-toggle="popover" data-content="The name displayed in the in-game server list.">
                    @Html.LabelFor(m => m.ServerName, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.ServerName, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.ServerName)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The world name displayed in the in-game server list. If Empty, the map name is used.">
                    @Html.LabelFor(m => m.WorldName, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.WorldName, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.WorldName)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, it will save the map state every below interval.">
                    @Html.LabelFor(m => m.AutoSave, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.AutoSave, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.AutoSave)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The interval in minutes at which the auto save will fire.">
                    @Html.LabelFor(m => m.AutoSaveInMinutes, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.AutoSaveInMinutes, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.AutoSaveInMinutes)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The maximum number of items allowed to exist on the map. If the number is reached, the oldest ones will be deleted.">
                    @Html.LabelFor(m => m.MaxFloatingObjects, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.MaxFloatingObjects, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.MaxFloatingObjects)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, it will automaticly remove small piece of ships, if they are in a linar motion and unpowered.">
                    @Html.LabelFor(m => m.RemoveTrash, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.RemoveTrash, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.RemoveTrash)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, the spawn ships are deleted as soon as the players leave the server.">
                    @Html.LabelFor(m => m.RespawnShipDelete, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.RespawnShipDelete, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.RespawnShipDelete)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The multiplier of the respawn time of the respawn ships. The bigger it is, the longer the timers will be.
                    <br />Default value is 1.">
                    @Html.LabelFor(m => m.SpawnShipTimeMultiplier, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.SpawnShipTimeMultiplier, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.SpawnShipTimeMultiplier)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, the server will pause itself when no player is connected.">
                    @Html.LabelFor(m => m.PauseGameWhenEmpty, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.PauseGameWhenEmpty, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.PauseGameWhenEmpty)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The maximum number of player allowed to join the server.">
                    @Html.LabelFor(m => m.MaxPlayers, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.MaxPlayers, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.MaxPlayers)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, it will change someting about the sound, probably...">
                    @Html.LabelFor(m => m.RealisticSound, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.RealisticSound, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.RealisticSound)
                    </div>
                </div>
            </div>
            <div class="form-horizontal tab" id="Map">
                <h3>Map Settings</h3>
                <hr />
                <div class="form-group" data-toggle="popover" data-content="
                    <strong>Survival :</strong><br />You have to mine asteroids and grind ships to gather your materials.<br />
                    <strong>Creative :</strong><br />You can place every block without having to weld them.">
                    @Html.LabelFor(m => m.GameMode, labelClass)
                    <div class="@valueColumn">
                        @Html.EnumDropDownListFor(m => m.GameMode, null, adminAccessClass)
                        @Html.ValidationMessageFor(m => m.GameMode)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="
                    <strong>SAFE :</strong><br />Nothing will fall from the sky, you can relax ...<br />
                    <strong>NORMAL :</strong><br />Cloudy, with a chance of meteors.<br />
                    <strong>CATACLYSM :</strong><br />You REALLY should take your iron umbrella !<br />
                    <strong>CATACLYSM_UNREAL :</strong><br />Basically , Run !!">
                    @Html.LabelFor(m => m.EnvironmentHostility, labelClass)
                    <div class="@valueColumn">
                        @Html.EnumDropDownListFor(m => m.EnvironmentHostility, null, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.EnvironmentHostility)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, players will be able to save the map locally.">
                    @Html.LabelFor(m => m.ClientCanSave, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.ClientCanSave, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.ClientCanSave)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, thrusters' flames will damage blocks.">
                    @Html.LabelFor(m => m.ThrusterDamage, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.ThrusterDamage, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.ThrusterDamage)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, random cargo-ships will spawn on your server.">
                    @Html.LabelFor(m => m.CargoShipsEnabled, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.CargoShipsEnabled, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.CargoShipsEnabled)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The boundaries of your server. Any object, player or ship will be destroyed if they go past the limit.">
                    @Html.LabelFor(m => m.WorldSizeKm, labelClass)
                    <div class="@valueColumn">
                        @Html.TextBoxFor(m => m.WorldSizeKm, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.WorldSizeKm)
                    </div>
                </div>
            </div>
            <div class="form-horizontal tab" id="Players">
                <h3>Players Settings</h3>
                <hr />
                <div class="form-group" data-toggle="popover" data-content="If enabled, the players will heal any wound over time.">
                    @Html.LabelFor(m => m.AutoHealing, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.AutoHealing, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.AutoHealing)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, the players will be able to use weapons.">
                    @Html.LabelFor(m => m.WeaponsEnabled, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.WeaponsEnabled, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.WeaponsEnabled)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, the players names will be displayed over theirs head.">
                    @Html.LabelFor(m => m.ShowPlayerNamesOnHud, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.ShowPlayerNamesOnHud, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.ShowPlayerNamesOnHud)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, a player who dies and who have no medbay to respawn will loose ownership on all his/her blocks.">
                    @Html.LabelFor(m => m.PermanentDeath, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.PermanentDeath, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.PermanentDeath)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, players will be able to copy-paste ships in creative mode.">
                    @Html.LabelFor(m => m.EnableCopyPaste, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.EnableCopyPaste, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.EnableCopyPaste)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, players will be able to go into spectator mode.">
                    @Html.LabelFor(m => m.EnableSpectator, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.EnableSpectator, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.EnableSpectator)
                    </div>
                </div>


            </div>
            <div class="form-horizontal tab" id="Rights">
                <h3>Rights</h3>
                <hr />
                <div class="form-group" data-toggle="popover" data-content="The list of the web administrators' logins.
                    <br />One per line.<br />Administrators can change every settings of the servers.">
                    @Html.LabelFor(m => m.WebAdministrators, labelClass)
                    <div class="@valueColumn">
                        @Html.TextAreaFor(m => m.WebAdministrators, superAdminAccessClass)
                        @Html.ValidationMessageFor(m => m.WebAdministrators)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The list of the web managers' logins.
                    <br />One per line.<br />Managers can change some settings of the servers.">
                    @Html.LabelFor(m => m.WebManagers, labelClass)
                    <div class="@valueColumn">
                        @Html.TextAreaFor(m => m.WebManagers, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.WebManagers)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The list of the web users' logins.
                    <br />One per line.<br />Users can see the server in theirs server list.">
                    @Html.LabelFor(m => m.WebUsers, labelClass)
                    <div class="@valueColumn">
                        @Html.TextAreaFor(m => m.WebUsers, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.WebUsers)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The list of the administrators' steam's ids.
                    <br />One per line.">
                    @Html.LabelFor(m => m.Administrators, labelClass)
                    <div class="@valueColumn">
                        @Html.TextAreaFor(m => m.Administrators, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.Administrators)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="The list of the banneds' steam's ids.
                    <br />One per line.">
                    @Html.LabelFor(m => m.Banned, labelClass)
                    <div class="@valueColumn">
                        @Html.TextAreaFor(m => m.Banned, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.Banned)
                    </div>
                </div>
                <div class="form-group" data-toggle="popover" data-content="If enabled, the server will reset all block ownership.">
                    @Html.LabelFor(m => m.ResetOwnership, labelClass)
                    <div class="@valueColumn">
                        @Html.CheckBoxFor(m => m.ResetOwnership, managerAccessClass)
                        @Html.ValidationMessageFor(m => m.ResetOwnership)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
