@{
    ViewBag.Title = "Server list";
}
<script src="/assets/global/plugins/select2/select2.min.js" type="text/javascript"></script>
<script src="/assets/global/plugins/datatables/media/js/jquery.dataTables.min.js" type="text/javascript"></script>
<script src="/assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="/assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.css" />
<script src="/assets/global/plugins/bootstrap-contextmenu/bootstrap-contextmenu.js"></script>
<style>
    tbody tr td:nth-child(2):hover {
        cursor: pointer;
    }
</style>
<div class="col-md-12">
    <div class="portlet light bordered">
        <div class="portlet-body">
            <!-- --- Context Menu --- -->
            <div id="context-menu">
                <ul class="dropdown-menu pull-left" role="menu">
                    <li>
                        <a href="#">
                            <i class="fa fa-play"></i> Start
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fa fa-stop"></i> Stop
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fa fa-repeat"></i> Restart
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fa fa-times"></i> Kill
                        </a>
                    </li>
                    <li>
                        <a href="#">
                            <i class="fa fa-trash"></i> Delete
                        </a>
                    </li>
                </ul>
            </div>
            <div class="table-toolbar">
                <div class="row">
                    <div class="col-md-6">
                        <button id="btnRefreshList" class="btn blue">
                            <i class="fa fa-refresh"></i> Refresh
                        </button>
                        <button id="btnCreateServer" class="btn green" style="display: none;">
                            <i class=" fa fa-plus"></i> New
                        </button>
                        <button id="btnDeleteServers" class="btn red" style="display: none;">
                            <i class=" fa fa-trash"></i> Delete
                        </button>
                    </div>
                    <div class="col-md-6">
                        <div class="btn-group pull-right" id="actionBtn" style="display: none;">
                            <button id="btnStartServers" class="btn green">
                                <i class="fa fa-play"></i> Start
                            </button>
                            <button id="btnStopServers" class="btn purple">
                                <i class="fa fa-stop"></i> Stop
                            </button>
                            <button id="btnRestartServers" class="btn yellow">
                                <i class="fa fa-repeat"></i> Restart
                            </button>
                            <button id="btnKillServers" class="btn red">
                                <i class="fa fa-times"></i> Kill
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <table class="table table-striped table-bordered table-hover" id="serverTable">
                <thead>
                    <tr>
                        <th class="table-checkbox">
                            <input type="checkbox" id="chkCheckAll" />
                        </th>
                        <th>
                            Name
                        </th>
                        <th>
                            Status
                        </th>
                        <th style="display: none;">
                            Access Level
                        </th>
                        <th style="display: none;">
                            Server Type
                        </th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <p>Hint : Right-click on a line for more options</p>
        </div>
    </div>
</div>
<script type="text/javascript">
    function initPage() {
        $("body").on('submit', '.bootbox-form', function (e) {
            e.preventDefault();
        });

        var table = $('#serverTable');

        table.dataTable({
            "language": {
                "emptyTable": "No server available",
                "search": "Search :",
                "zeroRecords": "No matching server found"

            },
            "paging": false,
            "info": false,

            "columns": [{
                "orderable": false
            }, {
                "orderable": true
            }, {
                "orderable": true
            }, {
                "orderable": false
            }, {
                "orderable": false
            }],
            // set the initial value
            "columnDefs": [{
                "searchable": false,
                "targets": [0]
            }, {
                "targets": [3],
                "visible": false
            }, {
                "targets": [4],
                "visible": false
            }],
            "order": [[1, "asc"]] // set second column as a default sort by asc
        });

        var isSuperAdmin = false;


        function updateCheckboxes() {
            $(".checkboxes").each(function () {
                var item = $(this);
                if (item.is(':checked')) {
                    $(this).parents('tr').addClass("active");
                } else {
                    $(this).parents('tr').removeClass("active");
                }
            });

            if ($('.checkboxes:checked').length == 0) {
                $('#chkCheckAll').prop("checked", false);
                $("#actionBtn").stop(true).fadeOut("slow");
                if (isSuperAdmin) {
                    $("#btnDeleteServers").stop(true).fadeOut("slow");
                }
            } else {
                $('#chkCheckAll').prop("checked", true);
                $("#actionBtn").stop(true).fadeIn("slow");
                if (isSuperAdmin) {
                    $("#btnDeleteServers").stop(true).fadeIn("slow");
                }
            }
            $.uniform.update();
        }

        $('#chkCheckAll').change(function () {
            $(".checkboxes").prop("checked", $(this).is(':checked'));
            updateCheckboxes();
        });

        $('body').on('change', ".checkboxes", function (event) {
            updateCheckboxes();
        });

        table.on('click', 'tbody tr td:nth-child(2), tbody tr td:nth-child(3)', function () {
            var id = $(this).parent().children().first().find('input').val();
            window.location.href = "/" + id + "/Dashboard/";
        });

        $(".dataTables_filter").addClass("pull-right");

        function refereshList(checkedIDs) {
            $("#btnRefreshList").children("i").addClass("fa-spin");
            $.get("/API/Server/GetServers",
            function (data) {
                var root = $($.parseXML(data)).find("Response");

                if (root.children("Type").text() == "Error") {
                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                    $("#btnRefreshList").children("i").removeClass("fa-spin");
                    return;
                }

                table.DataTable().clear();
                root.children("Content").children("Server").each(function (index) {
                    var item = $(this);
                    var Name = item.children("Name").text();
                    var ID = item.children("ID").text();
                    var Public = item.children("Public").text();
                    var State = item.children("State").text();
                    var AccessLevel = item.children("AccessLevel").text();
                    var Type = item.children("Type").text();

                    var chkbField;
                    var statusField;

                    if (AccessLevel != "None" && AccessLevel != "Guest" && AccessLevel != "User") {
                        chkbField = '<input type="checkbox" class="checkboxes" value="' + ID + '" />';
                    } else {
                        chkbField = '<input type="checkbox" style="display: none;" class="checkboxes" value="' + ID + '" />';
                    }

                    switch (State) {
                        case "Unknow":
                            statusField = '<span class="label label-sm label-default">Unknow</span>';
                            break;
                        case "Stopped":
                            statusField = '<span class="label label-sm label-danger">Stopped</span>';
                            break;
                        case "Starting":
                            statusField = '<span class="label label-sm label-info">Starting</span>';
                            break;
                        case "Running":
                            statusField = '<span class="label label-sm label-success">Running</span>';
                            break;
                        case "Stopping":
                            statusField = '<span class="label label-sm label-primary">Stopping</span>';
                            break;
                    }

                    table.DataTable().row.add([chkbField, Name, statusField, AccessLevel, Type]);
                });
                table.DataTable().draw();
                $("#btnRefreshList").children("i").removeClass("fa-spin");
                table.find('input:checkbox').uniform();

                $(".checkboxes").each(function () {
                    if ($.inArray($(this).val(), checkedIDs) != -1)
                        $(this).prop('checked', true);
                });
                updateCheckboxes();

                $('tr.odd, tr.even').contextmenu({
                    target: '#context-menu',
                    before: function (e, element, target) {
                        this.getMenu().find("li").hide();
                        e.preventDefault();
                        if ($(e.target).parents("tr").find("input:checkbox").css('display') == "none")
                            return false;

                        var status = $(e.target).parents("tr").children("td:nth-child(3)").text().trim();

                        if (status == "Unknow" || status == "Stopped")
                            this.getMenu().find("li:nth-child(1)").show();
                        if (status == "Unknow" || status == "Running")
                            this.getMenu().find("li:nth-child(2)").show();
                        if (status == "Unknow" || status == "Running")
                            this.getMenu().find("li:nth-child(3)").show();
                        if (status == "Unknow" || status == "Starting" || status == "Running" || status == "Stopping")
                            this.getMenu().find("li:nth-child(4)").show();
                        if (isSuperAdmin)
                            this.getMenu().find("li:nth-child(5)").show();
                        return true;
                    },
                    onItem: function (context, e) {
                        var serverID = $(context).children("td:nth-child(1)").find("input").val();

                        var clicked = $(e.target).text().trim();

                        if (clicked == "Start") {
                            bootbox.confirm("Are you sure you want to start this server ?",
                                function (result) {
                                    if (result) {
                                        $.post("/API/Server/StartServers",
                                            {
                                                ServerIDs: serverID
                                            },
                                            function (data) {

                                                var root = $($.parseXML(data)).find("Response");

                                                if (root.children("Type").text() == "Error") {
                                                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                                    return;
                                                }

                                                toastr.success("The server has been started", "Server Started");
                                                softRefresh();
                                            });
                                    }
                                });
                        } else if (clicked == "Stop") {
                            bootbox.confirm("Are you sure you want to stop this server ?",
                                function (result) {
                                    if (result) {
                                        $.post("/API/Server/StopServers",
                                            {
                                                ServerIDs: serverID
                                            },
                                            function (data) {

                                                var root = $($.parseXML(data)).find("Response");

                                                if (root.children("Type").text() == "Error") {
                                                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                                    return;
                                                }

                                                toastr.success("The server has been stopped", "Server Stopped");
                                                softRefresh();
                                            });
                                    }
                                });
                        } else if (clicked == "Restart") {
                            bootbox.confirm("Are you sure you want to restart this server ?",
                                function (result) {
                                    if (result) {
                                        $.post("/API/Server/RestartServers",
                                            {
                                                ServerIDs: serverID
                                            },
                                            function (data) {

                                                var root = $($.parseXML(data)).find("Response");

                                                if (root.children("Type").text() == "Error") {
                                                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                                    return;
                                                }

                                                toastr.success("The server has been restarted", "Server Restarted");
                                                softRefresh();
                                            });
                                    }
                                });
                        } else if (clicked == "Kill") {
                            bootbox.confirm("Are you sure you want to kill this server ?<br/>" +
                                "Warning : this may lead to save corruption !",
                                function (result) {
                                    if (result) {
                                        $.post("/API/Server/KillServers",
                                            {
                                                ServerIDs: serverID
                                            },
                                            function (data) {

                                                var root = $($.parseXML(data)).find("Response");

                                                if (root.children("Type").text() == "Error") {
                                                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                                    return;
                                                }

                                                toastr.success("The server has been killed", "Server Killed");
                                                softRefresh();
                                            });
                                    }
                                });
                        } else if (clicked == "Delete") {
                            bootbox.confirm("Are you sure you want to delete this server ?<br/>" +
                            "Warning : This will permanantly delete the server configuration, saves, backups and any other related files. !",
                            function (result) {
                                if (result) {
                                    bootbox.confirm("Are you <strong>really really</strong> sure you want to delete this server ?<br/>" +
                                    "Warning : This action is irreversible!",
                                    function (result) {
                                        if (result) {
                                            $.post("/API/Server/DeleteServers",
                                            {
                                                ServerIDs: serverID
                                            },
                                            function (data) {

                                                var root = $($.parseXML(data)).find("Response");

                                                if (root.children("Type").text() == "Error") {
                                                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                                    return;
                                                }

                                                toastr.success("The server has been deleted", "Server deleted");
                                                softRefresh();
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    }
                });

            });
            $.get("/API/Account/GetDetails",
            function (data) {
                var root = $($.parseXML(data)).find("Response");

                if (root.children("ReturnCode").text() == "ACT-GTD-NOTLOG") {
                    return;
                }

                if (root.children("Type").text() == "Error") {
                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                    $("#btnRefreshList").children("i").removeClass("fa-spin");
                    return;
                }

                if (root.children("Content").children("IsSuperAdmin").text() == "true") {
                    $("#btnCreateServer").stop(true).fadeIn("slow");
                    isSuperAdmin = true;
                } else {
                    $("#btnCreateServer").stop(true).fadeOut("slow");
                    isSuperAdmin = false;
                }
            });
        }

        refereshList();

        setInterval(softRefresh, 10000);
        function softRefresh() {
            var ids = getCheckedVals();
            refereshList(ids);
        }

        $("#btnRefreshList").click(function () {
            softRefresh();
        });

        function getCheckedVals() {
            var retArray = [];
            $(".checkboxes:checked").each(function () {
                retArray.push($(this).val());
            });
            return retArray;
        }

        $("#btnCreateServer").click(function () {
            bootbox.dialog({
                title: "New Server",
                message: "<form class=\"bootbox-form\"><input id=\"impNewServ\" class=\"bootbox-input bootbox-input-text form-control\" autocomplete=\"off\" type=\"text\" placeholder=\"Server_Name\"></form>",
                buttons: {
                    success: {
                        label: "Create",
                        className: "btn-success",
                        callback: function () {
                            var name = $('#impNewServ').val();
                            $.post("/API/Server/CreateServer",
                            {
                                ServerName: name
                            },
                            function (data) {
                                var root = $($.parseXML(data)).find("Response");

                                if (root.children("Type").text() == "Error") {
                                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                    return;
                                }
                                toastr.success(root.children("Content").text(), "Server Created");
                                softRefresh();
                            });
                        }
                    }
                }
            });
        });

        $("#btnDeleteServers").click(function () {
            var ids = getCheckedVals();
            var names = [];
            table.DataTable().rows().nodes().to$().each(function (index, value) {
                var name = $(value).children(":nth-child(2)").text();
                if ($.inArray($(value).first().find("input").val(), ids) > -1) {
                    names.push(name);
                }
            });
            bootbox.confirm("<div class=\"note note-danger\">" +
            "<h4 class=\"block\"><i class=\"fa fa-warning\"></i> <strong>Warning</strong></h4>" +
            "<p>Deleting server(s) will permanantly delete the server configuration, saves, backups and any other related files.<br/>" +
            "<strong>This action is irreversible !</strong></p>" +
            "</div>" +
            "Are you sure you want to delete the folowing server(s) : <br/><br/>" +
            "<ul>" +
            "<li>" + names.join("</li><li>") + "</li>" +
            "</ul>",
            function (result) {
                if (result) {
                    bootbox.confirm("<div class=\"note note-danger\">" +
                    "<h4 class=\"block\"><i class=\"fa fa-warning\"></i> <strong>Last Warning</strong></h4>" +
                    "<p>" +
                    "Are you really, really, sure you want to delete the folowing server(s) : <br/><br/>" +
                    "<ul>" +
                    "<li>" + names.join("</li><li>") + "</li>" +
                    "</ul>" +
                    "<strong>This action is irreversible ! I.R.R.E.V.E.R.S.I.B.L.E !!!!</strong></p>" +
                    "</div>",
                    function (result) {
                        if (result) {
                            $.post("/API/Server/DeleteServers",
                            {
                                ServerIDs: ids.join(";")
                            },
                            function (data, status) {
                                var root = $($.parseXML(data)).find("Response");

                                if (root.children("Type").text() == "Error") {
                                    toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                    return;
                                }
                                toastr.success(root.children("Content").text(), "Server(s) Started");
                                softRefresh();
                            });
                        }
                    });
                }
            });
        });

        $("#btnStartServers").click(function () {
            var ids = getCheckedVals();
            var names = [];
            table.DataTable().rows().nodes().to$().each(function (index, value) {
                var name = $(value).children(":nth-child(2)").text();
                if ($.inArray($(value).first().find("input").val(), ids) > -1) {
                    names.push(name);
                }
            });
            bootbox.confirm("<br/>Are you sure you want to start the folowing server(s) : <br/><br/>" +
                "<ul>" +
                "<li>" + names.join("</li><li>") + "</li>" +
                "</ul>",
                function (result) {
                    if (result) {
                        $.post("/API/Server/StartServers",
                        {
                            ServerIDs: ids.join(";")
                        },
                        function (data) {
                            var root = $($.parseXML(data)).find("Response");

                            if (root.children("Type").text() == "Error") {
                                toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                return;
                            }
                            toastr.success(root.children("Content").text(), "Server(s) Started");
                            softRefresh();
                        });
                    }
                });
        });

        $("#btnStopServers").click(function () {
            var ids = getCheckedVals();
            var names = [];
            table.DataTable().rows().nodes().to$().each(function (index, value) {
                var name = $(value).children(":nth-child(2)").text();
                if ($.inArray($(value).first().find("input").val(), ids) > -1) {
                    names.push(name);
                }
            });
            bootbox.confirm("<br/>Are you sure you want to stop the folowing server(s) : <br/><br/>" +
                "<ul>" +
                "<li>" + names.join("</li><li>") + "</li>" +
                "</ul>",
                function (result) {
                    if (result) {
                        $.post("/API/Server/StopServers",
                        {
                            ServerIDs: ids.join(";")
                        },
                        function (data) {
                            var root = $($.parseXML(data)).find("Response");

                            if (root.children("Type").text() == "Error") {
                                toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                return;
                            }
                            toastr.success(root.children("Content").text(), "Server(s) Stopped");
                            softRefresh();
                        });
                    }
                });
        });

        $("#btnRestartServers").click(function () {
            var ids = getCheckedVals();
            var names = [];
            table.DataTable().rows().nodes().to$().each(function (index, value) {
                var name = $(value).children(":nth-child(2)").text();
                if ($.inArray($(value).first().find("input").val(), ids) > -1) {
                    names.push(name);
                }
            });
            bootbox.confirm("<br/>Are you sure you want to restart the folowing server(s) : <br/><br/>" +
                "<ul>" +
                "<li>" + names.join("</li><li>") + "</li>" +
                "</ul>" +
                "<input type=\"checkbox\" id=\"chkbxRestart\" name=\"chkbxRestart\"/><label for=\"chkbxRestart\">Restart only running server(s)</label>",
                function (result) {
                    if (result) {
                        toastr.success(names.join(", ") + " restart initiated, it may take up to a few minutes.", "Server(s) Restart Initiated");
                        $.post("/API/Server/RestartServers",
                        {
                            ServerIDs: ids.join(";"),
                            OnlyStarted: $("#chkbxRestart").is(":checked").toString()
                        },
                        function (data, status) {
                            var root = $($.parseXML(data)).find("Response");

                            if (root.children("Type").text() == "Error") {
                                toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                $("#btnRestartServers").children("i").removeClass("fa-spin");
                                return;
                            }
                            toastr.success(root.children("Content").text(), "Server(s) Restart Complete");
                            softRefresh();
                        });
                    }
                });
        });

        $("#btnKillServers").click(function () {
            var ids = getCheckedVals();
            var names = [];
            table.DataTable().rows().nodes().to$().each(function (index, value) {
                var name = $(value).children(":nth-child(2)").text();
                if ($.inArray($(value).first().find("input").val(), ids) > -1) {
                    names.push(name);
                }
            });
            bootbox.confirm("<div class=\"note note-danger\">" +
                "<h4 class=\"block\"><i class=\"fa fa-warning\"></i> <strong>Warning</strong></h4>" +
                "<p>Killing server(s) may result in <strong>save corruption</strong> !<br/>" +
                "Do it only in case of emergency or if a server is being unresponsive !</p>" +
                "</div>" +
                "Are you sure you want to kill the folowing server(s) : <br/><br/>" +
                "<ul>" +
                "<li>" + names.join("</li><li>") + "</li>" +
                "</ul>",
                function (result) {
                    if (result) {
                        $.post("/API/Server/KillServers",
                        {
                            ServerIDs: ids.join(";")
                        },
                        function (data, status) {
                            var root = $($.parseXML(data)).find("Response");

                            if (root.children("Type").text() == "Error") {
                                toastr.error(root.children("Content").text(), "Error " + root.children("ReturnCode").text());
                                return;
                            }
                            toastr.success(root.children("Content").text(), "Server(s) Killed");
                            softRefresh();
                        });
                    }
                });
        });

    }
</script>
